module car_count_display (COUNT, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
   input  logic [4:0] COUNT;
   output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
   
	logic [3:0] ones_digit, tens_digit;
	logic enable;
	display_num_on_hex ones = (.num(ones_digit), .HEX(HEX0), .enable(enable));
	display_num_on_hex tens = (.num(tens_digit), .HEX(HEX1), .enable(enable));
	
   always_comb
	   ones_digit = COUNT % 10;
		tens_digit = COUNT / 10;
		
	   if (COUNT == 0) begin
		  
		end
		else if (COUNT == 25) begin
		
		end
		else begin
		   HEX5 = ~7'b0111111;
         HEX4 = ~7'b0111111;
         HEX3 = ~7'b0111111;
         HEX2 = ~7'b0111111;
		end
		
      case (COUNT)
        
         5'b00000: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; 
            HEX0 = ~7'b0111111; // 0
            end
            
         5'b00001: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b0000110; // 1
            end
            
         5'b00010: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1011011; // 2
            end
            
         5'b00011: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1001111; // 3
            end
            
         5'b00100: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1100110; // 4
            end
            
         5'b00101: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1101101; // 5
            end
         
         5'b00110: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1111101; // 6 
            end

        5'b00111: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b0000111; // 7
            end    

        5'b01000: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1111111; // 8
            end

        5'b01001: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1101111; // 9
            end  

        5'b01010: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
... (152 lines left)
Collapse
message.txt
8 KB
module car_count_display (COUNT, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
   input  logic [4:0] COUNT;
   output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;

   always_comb
      case (COUNT)
Expand
message.txt
8 KB
Pedro â€” Today at 7:21 PM
module car_count_display (COUNT, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
   input  logic [4:0] COUNT;
   output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;

   always_comb
      case (COUNT)
        
         5'b00000: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; 
            HEX0 = ~7'b0111111; // 0
            end
            
         5'b00001: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b0000110; // 1
            end
            
         5'b00010: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1011011; // 2
            end
            
         5'b00011: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1001111; // 3
            end
            
         5'b00100: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b0111111;
            HEX2 = ~7'b0111111;
            HEX1 = ~7'b0111111; //0 
            HEX0 = ~7'b1100110; // 4
            end
            
            
         5'b00101: begin
            HEX5 = ~7'b0111111;
            HEX4 = ~7'b0111111;
            HEX3 = ~7'b1110001; // F
            HEX2 = ~7'b0011100; // u
            HEX1 = ~7'b0110000; // l
            HEX0 = ~7'b0110000; // l
            end

         default: begin
            HEX5 = 7'bX;
            HEX4 = 7'bX;
            HEX3 = 7'bX;
            HEX2 = 7'bX;
            HEX1 = 7'bX;
            HEX0 = 7'bX;
            end
            
      endcase
endmodule