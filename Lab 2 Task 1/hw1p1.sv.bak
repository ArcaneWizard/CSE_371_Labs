/* Module for EE/CSE371 Homework 1 Problem 1.
 * A simple synchronous signal with a DFF and fullAdder.
 */
module hw1p1 (input logic clk,
    input logic reset,
    input logic x,
    input logic y,
    output logic sum,
    output logic carry_out);

	logic carry_in;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            carry_in <= 1'b0;
        end else begin
            {carry_out, sum} <= x + y + carry_in;
            carry_in <= carry_out;
        end
    end

endmodule  // hw1p1


/* Testbench for Homework 1 Problem 1 */
// Testbench for hw1p1
module hw1p1_testbench();

    logic clk;
    logic reset;
    logic x, y;
    logic sum;
    logic carry_out;

    // Instantiate the hw1p1 module
    hw1p1 dut (.clk(clk), .reset(reset), .x(x), .y(y), .sum(sum), .carry_out(carry_out));

    // Set up the clock
    parameter CLOCK_PERIOD = 10;  // Clock period in time units
    initial begin
        clk = 0;
        forever #(CLOCK_PERIOD / 2) clk = ~clk;
    end

   
    initial begin
       
        reset = 1; x = 0; y = 0;
        @(posedge clk);  

       
        reset = 0;
        // simple addition without carry
        x = 0; y = 0; @(posedge clk);
        x = 0; y = 1; @(posedge clk);
        x = 1; y = 0; @(posedge clk);
        x = 1; y = 1; @(posedge clk);  

        //  check carry-in functionality
        //
        x = 0; y = 0; @(posedge clk);  // Check if carry_in is added
        x = 1; y = 1; @(posedge clk);  // Another case with carry
        
        // Assert reset and check if output holds
        reset = 1; @(posedge clk);
        reset = 0; @(posedge clk);

    end

endmodule  // hw1p1_testbench
